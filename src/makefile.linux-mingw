# Copyright (c) 2009-2021 Bitcoin Developers
# Copyright (c) 2009-2021 LiteDogecoin Developers
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.


TARGET_PLATFORM:=i686
#TARGET_PLATFORM:=x86_64
DEPSDIR:=/usr/$(TARGET_PLATFORM)-w64-mingw32
CC:=$(TARGET_PLATFORM)-w64-mingw32-gcc
CXX:=$(TARGET_PLATFORM)-w64-mingw32-g++
RANLIB=$(TARGET_PLATFORM)-w64-mingw32-ranlib
STRIP=$(TARGET_PLATFORM)-w64-mingw32-strip

USE_UPNP:=1
USE_WALLET:=1
USE_IPV6:=1


INCLUDEPATHS= \
 -I"$(CURDIR)" \
 -I"$(CURDIR)"/obj \
 -I"$(DEPSDIR)/boost-1.50.0-mgw" \
 -L"$(DEPSDIR)/db-4.8.30.NC/build_unix" \
 -I"$(DEPSDIR)/openssl-1.0.1g/include" \
 -I"$(DEPSDIR)"

LIBPATHS= \
 -L"$(DEPSDIR)/boost-1.50.0-mgw\stage\lib" \
 -L"$(DEPSDIR)/db-4.8.30.NC/build_unix" \
 -L"$(DEPSDIR)/openssl-1.0.1g"

LIBS= \
 -l boost_system-mt-s \
 -l boost_filesystem-mt-s \
 -l boost_program_options-mt-s \
 -l boost_thread_win32-mt-s \
 -l boost_chrono-mt-s \
 -l db_cxx \
 -l ssl \
 -l crypto \
 -l z

DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE -DUSE_IPV6
DEBUGFLAGS=-g
CFLAGS=-O2 -std=c++11 -pthread -msse2 -w -Wall -Wextra -Wno-ignored-qualifiers -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(HARDENING) $(CXXFLAGS) $(INCLUDEPATHS)
LDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -static-libgcc -static-libstdc++

TESTDEFS = -DTEST_DATA_DIR=$(abspath test/data)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBPATHS += -L"$(DEPSDIR)/miniupnpc"
	LIBS += -l miniupnpc -l iphlpapi
	DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
	ifeq (${USE_WALLET}, 1)
        DEFS += -DENABLE_WALLET
        OBJS += \
endif

LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi


# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/init.o \
    obj/bitcoind.o \
    obj/keystore.o \
    obj/core.o \
    obj/main.o \
    obj/net.o \
    obj/protocol.o \
    obj/rpcclient.o \
    obj/rpcprotocol.o \
    obj/rpcserver.o \
    obj/rpcmisc.o \
    obj/rpcnet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/timedata.o \
    obj/script.o \
    obj/txmempool.o \
    obj/util.o \
    obj/hash.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/sync.o \
    obj/scrypt.o \
    obj/chatpage.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/chainparams.o \
    obj/db.o \
    obj/miner.o \
    obj/rpcdump.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/wallet.o \
    obj/walletdb.o

all: litedoged.exe

ifeq (${USE_ASM}, 1)
# Assembler implementation
OBJS += crypto/scrypt/asm/obj/scrypt-arm.o crypto/scrypt/asm/obj/scrypt-x86.o crypto/scrypt/asm/obj/scrypt-x86_64.o crypto/scrypt/asm/obj/asm-wrapper.o

crypto/scrypt/asm/obj/scrypt-x86.o: crypto/scrypt/asm/scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj/scrypt-x86_64.o: crypto/scrypt/asm/scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj/scrypt-arm.o: crypto/scrypt/asm/scrypt-arm.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

crypto/scrypt/asm/obj/asm-wrapper.o: crypto/scrypt/asm/asm-wrapper.cpp
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

LIBS += $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a
DEFS += -I"$(CURDIR)/leveldb/include"
DEFS += -I"$(CURDIR)/leveldb/helpers"
OBJS += obj/txdb-leveldb.o
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && CC=$(CC) CXX=$(CXX) TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS="-I$(INCLUDEPATHS)" LDFLAGS="-L$(LIBPATHS)" $(MAKE) libleveldb.a libmemenv.a && $(RANLIB) libleveldb.a && $(RANLIB) libmemenv.a && cd ..
obj/txdb-leveldb.o: leveldb/libleveldb.a

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<	

litedoge.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	
TESTOBJS := $(patsubst test/%.cpp,obj-test/%.o,$(wildcard test/*.cpp))

obj-test/%.o: test/%.cpp $(HEADERS)
	i586-mingw32msvc-g++ -c $(TESTDEFS) $(CFLAGS) -o $@ $<

test_litedoged.exe: $(TESTOBJS) $(filter-out obj/init.o,$(OBJS:obj/%=obj/%))
	i586-mingw32msvc-g++ $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ -lboost_unit_test_framework-mt-s $(LIBS)

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<	

clean:
        -rm -f litedoged.exe 
	-rm -f obj/*.o
	-rm -f obj/*.o
	-rm -f obj/*.P
	-rm -f obj/*.d
	-rm -f obj-test/*.o
	-rm -f test_litedoge.exe
	-rm -f src/build.h
	-rm -f crypto/scrypt/asm/obj/*.o
	-rm -f crypto/scrypt/asm/obj/*.P
	-rm -f crypto/scrypt/asm/obj/*.d
	-rm -f crypto/scrypt/intrin/obj/*.o
	-rm -f crypto/scrypt/intrin/obj/*.P
	-rm -f crypto/scrypt/intrin/obj/*.d
	-rm -f crypto/scrypt/generic/obj/*.o
	-rm -f crypto/scrypt/generic/obj/*.P
	-rm -f crypto/scrypt/generic/obj/*.d
	-rm -f obj/build.h
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..


FORCE:
