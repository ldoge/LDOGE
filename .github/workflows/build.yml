name: Continuous Integration

on:
  push:
    paths-ignore:
      - '**/*.md'
  pull_request:
    paths-ignore:
      - 'doc/**'
      - 'contrib/**'
      - '**/*.md'

jobs:
  build:
    name: ${{ matrix.name }}

    env:
      MAKEJOBS: "-j3"
      CHECK_DOC: "0"
      CCACHE_SIZE: "100M"
      CCACHE_TEMPDIR: /tmp/.ccache-temp
      CCACHE_COMPRESS: "1"
      PYTHON_DEBUG: "1"
      WINEDEBUG: fixme-all
      SDK_URL: https://bitcoincore.org/depends-sources/sdks

    strategy:
      fail-fast: false
      matrix:
        name:
          - x86_64-linux
          - x86_64-macos
          - x86_64-win
        include:
          - name: x86_64-linux
            host: x86_64-unknown-linux-gnu
            os: ubuntu-18.04
            packages: bc python3-zmq libboost-dev libboost-all-dev libssl-dev libdb++-dev libminiupnpc-dev libleveldb-dev 
            run-tests: true
            goal: install
          - name: x86_64-win
            host: x86_64-w64-mingw32
            arch: "i386"
            os: ubuntu-20.04
            packages: python3 nsis g++-mingw-w64-x86-64 wine64 bc wine-binfmt libboost-dev libboost-all-dev libssl-dev libdb++-dev libminiupnpc-dev libleveldb-dev 
            postinstall: |
              sudo update-alternatives --set x86_64-w64-mingw32-gcc  /usr/bin/x86_64-w64-mingw32-gcc-posix
              sudo update-alternatives --set x86_64-w64-mingw32-g++  /usr/bin/x86_64-w64-mingw32-g++-posix
              sudo update-binfmts --import /usr/share/binfmts/wine
            run-tests: true
            dep-opts: ""
            config-opts: "--enable-reduce-exports --enable-gui=qt5"
            goal: install
          - name: x86_64-macos
            host: x86_64-apple-darwin11
            os: ubuntu-18.04
            packages: cmake imagemagick libcap-dev librsvg2-bin libz-dev libtiff-tools libtinfo5 python3-setuptools xorriso libtinfo5 libboost-dev libboost-all-dev libssl-dev libdb++-dev libminiupnpc-dev libleveldb-dev 
            run-tests: false
            dep-opts: ""
            config-opts: "--enable-gui=qt5 --enable-reduce-exports"
            goal: install
            sdk: 10.11

    runs-on: ${{ matrix.os }}

    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v2
        with:
            version: 5.12.8
      - name: Add architecture
        if: ${{ matrix.arch }}
        run: |
          sudo dpkg --add-architecture "${{ matrix.arch }}"

      - name: Install packages
        run: |
          sudo apt-get update
          sudo apt-get install build-essential libtool autotools-dev automake pkg-config bsdmainutils curl ca-certificates ccache python3 rsync git procps bison
          sudo apt-get install ${{ matrix.packages }}

      - name: Post install
        if: ${{ matrix.postinstall }}
        run: ${{ matrix.postinstall }}

      - name: Checkout
        uses: actions/checkout@v2

      - name: Install SDK
        if: ${{ matrix.sdk }}
        run: |
          mkdir -p ./depends/sdk-sources
          mkdir -p ./depends/SDKs
          curl --location --fail $SDK_URL/MacOSX${{ matrix.sdk }}.sdk.tar.gz -o depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz
          tar -C depends/SDKs -xf depends/sdk-sources/MacOSX${{ matrix.sdk }}.sdk.tar.gz
      - name: QMake
        run: qmake RELEASE=1
      - name: Make
        run: make
      - name: Upload Files to a GitHub Release (Ubuntu)
        if: ${{ matrix.platform == 'ubuntu-latest' }}
        uses: svenstaro/upload-release-action@2.2.1
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: build/main
          asset_name: main-linux_amd64-python${{ matrix.python-version }}
          tag: latest
          overwrite: true
          prerelease: true
          body: "${{ env.BUILD_TYPE }} for ${{ matrix.platform }}"
      - uses: octokit/request-action@v2.x
        id: get_latest_release
       with:
            route: GET /repos/:repository/releases/latest
            repository: ${{ github.repository }}
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: get upload url
        id: get_upload_url
       run: |
          url=$(echo "$response" | jq -r '.upload_url')
          echo "::set-output name=url::$url"
        env: 
            response:  ${{ steps.get_latest_release.outputs.data }}
     
      - name: Upload a Release Asset
        uses: actions/upload-release-asset@v1.0.2
        env:
            GITHUB_TOKEN: ${{ secrets.mysecret }}
        with:
          # The URL for uploading assets to the release
          upload_url:  ${{steps.get_upload_url.outputs.url}}
          # The path to the asset you want to upload
          asset_path: ./my-artifact.zip
          # The name of the asset you want to upload
          asset_name: my-artifact.zip
          # The content-type of the asset you want to upload. See the supported Media Types here: https://www.iana.org/assignments/media-types/media-types.xhtml for more information
          asset_content_type: application/zip
        

        
  
