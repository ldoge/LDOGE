---
name: "litedoge"
enable_cache: true
distro: "ubuntu"
suites:
- "focal"
architectures:
- "amd64"
packages:
# Common dependencies.
- "autoconf"
- "automake"
- "binutils"
- "bison"
- "bsdmainutils"
- "ca-certificates"
- "curl"
- "faketime"
- "g++-8"
- "gcc-8"
- "git"
- "libtool"
- "patch"
- "pkg-config"
- "python3"
- "python3-pip"
- "pigz"
# Cross compilation HOSTS:
#  - arm-linux-gnueabihf
- "binutils-arm-linux-gnueabihf"
- "g++-8-arm-linux-gnueabihf"
#  - aarch64-linux-gnu
- "binutils-aarch64-linux-gnu"
- "g++-8-aarch64-linux-gnu"
#  - powerpc64-linux-gnu
- "binutils-powerpc64-linux-gnu"
- "g++-8-powerpc64-linux-gnu"
#  - powerpc64le-linux-gnu
- "binutils-powerpc64le-linux-gnu"
- "g++-8-powerpc64le-linux-gnu"
#  - riscv64-linux-gnu
- "binutils-riscv64-linux-gnu"
- "g++-8-riscv64-linux-gnu"
remotes:
- "url": "https://github.com/ldoge/LDOGE.git"
  "dir": "litedoge"
files: 
- "miniupnpc-1.6.tar.gz"
- "qrencode-3.2.0.tar.bz2"
script: |
  set -e -o pipefail

  WRAP_DIR=$HOME/wrapped
  HOSTS="x86_64-linux-gnu arm-linux-gnueabihf aarch64-linux-gnu powerpc64-linux-gnu powerpc64le-linux-gnu riscv64-linux-gnu"
  CONFIGFLAGS="--enable-glibc-back-compat --enable-reduce-exports --disable-bench --disable-tests --disable-gui-tests --disable-fuzz-binary --with-gui"
  FAKETIME_HOST_PROGS="gcc g++"
  FAKETIME_PROGS="date ar ranlib nm"
  HOST_CFLAGS="-O2 -g"
  HOST_CXXFLAGS="-O2 -g"
  HOST_LDFLAGS_BASE="-static-libstdc++ -Wl,-O2"

  export TZ="UTC"
  export BUILD_DIR="$PWD"
  mkdir -p ${WRAP_DIR}
  if test -n "$GBUILD_CACHE_ENABLED"; then
    export SOURCES_PATH=${GBUILD_COMMON_CACHE}
    export BASE_CACHE=${GBUILD_PACKAGE_CACHE}
    mkdir -p ${BASE_CACHE} ${SOURCES_PATH}
  fi

  # Use $LIB in LD_PRELOAD to avoid hardcoding the dir (See `man ld.so`)
  function create_global_faketime_wrappers {
  for prog in ${FAKETIME_PROGS}; do
    echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${prog}
    echo "REAL=\`which -a ${prog} | grep -v ${WRAP_DIR}/${prog} | head -1\`" >> ${WRAP_DIR}/${prog}
    echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${prog}
    echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${prog}
    echo "exec \"\$REAL\" \"\$@\"" >> $WRAP_DIR/${prog}
    chmod +x ${WRAP_DIR}/${prog}
  done
  }

  function create_per-host_faketime_wrappers {
  for i in $HOSTS; do
    for prog in ${FAKETIME_HOST_PROGS}; do
        if which ${i}-${prog}-8
        then
            echo '#!/usr/bin/env bash' > ${WRAP_DIR}/${i}-${prog}
            echo "REAL=\`which -a ${i}-${prog}-8 | grep -v ${WRAP_DIR}/${i}-${prog} | head -1\`" >> ${WRAP_DIR}/${i}-${prog}
            echo "export LD_PRELOAD='/usr/\$LIB/faketime/libfaketime.so.1'" >> ${WRAP_DIR}/${i}-${prog}
            echo "export FAKETIME=\"$1\"" >> ${WRAP_DIR}/${i}-${prog}
            if [ "${i:0:11}" = "powerpc64le" ]; then
                echo "exec \"\$REAL\" -mcpu=power8 -mtune=power9 \"\$@\"" >> $WRAP_DIR/${i}-${prog}
            elif [ "${i:0:9}" = "powerpc64" ]; then
                echo "exec \"\$REAL\" -mcpu=970 -mtune=power9 \"\$@\"" >> $WRAP_DIR/${i}-${prog}
            else
                echo "exec \"\$REAL\" \"\$@\"" >> $WRAP_DIR/${i}-${prog}
            fi
            chmod +x ${WRAP_DIR}/${i}-${prog}
        fi
    done
  done
  }

  pip3 install lief==0.12.3

  # Faketime for depends so intermediate results are comparable
  export PATH_orig=${PATH}
  create_global_faketime_wrappers "2000-01-01 12:00:00"
  create_per-host_faketime_wrappers "2000-01-01 12:00:00"
  export PATH=${WRAP_DIR}:${PATH}

  INSTDIR="$HOME/install"
  export LIBRARY_PATH="$INSTDIR/lib"
  #
  tar xzf miniupnpc-1.6.tar.gz
  cd miniupnpc-1.6
  INSTALLPREFIX=$INSTDIR make $MAKEOPTS install
  cd ..
  #
  tar xjf qrencode-3.2.0.tar.bz2
  cd qrencode-3.2.0
  ./configure --prefix=$INSTDIR --enable-static --disable-shared
  make $MAKEOPTS install
  cd ..
  #
  cd litedoge
  mkdir -p $OUTDIR/src
  git archive HEAD | tar -x -C $OUTDIR/src
  cp $OUTDIR/src/doc/README $OUTDIR
  cp $OUTDIR/src/COPYING $OUTDIR
  cd src
  make -f makefile.unix STATIC=1 OPENSSL_INCLUDE_PATH="$INSTDIR/include" OPENSSL_LIB_PATH="$INSTDIR/lib" $MAKEOPTS litedoged USE_UPNP=1 DEBUGFLAGS=
  mkdir -p $OUTDIR/bin/$GBUILD_BITS
  install -s litedoged $OUTDIR/bin/$GBUILD_BITS
  #
  cd ..
  qmake INCLUDEPATH="$INSTDIR/include" LIBS="-L$INSTDIR/lib" RELEASE=1
  make $MAKEOPTS
  install litedoge-qt $OUTDIR/bin/$GBUILD_BITS
